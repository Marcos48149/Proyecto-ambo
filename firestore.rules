/**
 * @fileoverview Firestore Security Rules for the e-commerce application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data
 * (profiles, cart items, orders) and allows public read access to product
 * information. Write access to products is currently open but should be
 * restricted to authorized roles in a production environment.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. Only the authenticated
 *   user can access their own profile data.
 * - /products/{productId}: Stores product details. Publicly readable, but
 *   write access should be restricted.
 * - /users/{userId}/cartItems/{cartItemId}: Stores cart items associated with a
 *   specific user. Only the user can access their own cart items.
 * - /users/{userId}/orders/{orderId}: Stores order details for a specific user.
 *   Only the user can access their own order history.
 * - /orders/{orderId}/orderItems/{orderItemId}: Stores specific product details
 *   within an order.
 *
 * Key Security Decisions:
 * - Products are publicly readable to allow browsing without authentication.
 *   However, write access to products is not restricted by default and needs to be addressed.
 * - User listing is disallowed.
 * - Data validation is relaxed to allow for rapid prototyping, but critical
 *   ownership and relationship fields are validated.
 *
 * Denormalization for Authorization:
 * - CartItem and Order documents include the userId to allow direct authorization
 *   without requiring server-side lookups.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own profile data.
     * @path /users/{userId}
     * @allow (create, update, delete) if the user is signed in and the userId matches the authenticated user's ID.
     * @allow (get, list) if the user is signed in and the userId matches the authenticated user's ID.
     * @deny (create, update, delete) if the user is not signed in or the userId does not match the authenticated user's ID.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource.data.id == userId;
      allow delete: if isOwner(userId) && resource.data.id == userId;
    }

    /**
     * @description Allows anyone to read product details, but restricts modifications.
     * @path /products/{productId}
     * @allow (get, list) Allow anyone to read product data.
     * @allow (create, update, delete) if false -  but should be updated to restrict modifications to authorized roles (e.g., admin).
     * @deny (create, update, delete) if true - always denied.
     * @principle Public read access with restricted writes.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add role-based authorization for product modifications.
    }

    /**
     * @description Allows users to manage their own cart items.
     * @path /users/{userId}/cartItems/{cartItemId}
     * @allow (create, update, delete) if the user is signed in and the userId matches the authenticated user's ID.
     * @allow (get, list) if the user is signed in and the userId matches the authenticated user's ID.
     * @deny (create, update, delete) if the user is not signed in or the userId does not match the authenticated user's ID.
     * @principle Enforces document ownership for cart items.
     */
    match /users/{userId}/cartItems/{cartItemId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isOwner(userId) && resource.data.userId == userId;
      allow delete: if isOwner(userId) && resource.data.userId == userId;
    }

    /**
     * @description Allows users to read and manage their own order history.
     * @path /users/{userId}/orders/{orderId}
     * @allow (create, update, delete) if the user is signed in and the userId matches the authenticated user's ID.
     * @allow (get, list) if the user is signed in and the userId matches the authenticated user's ID.
     * @deny (create, update, delete) if the user is not signed in or the userId does not match the authenticated user's ID.
     * @principle Enforces document ownership for orders.
     */
    match /users/{userId}/orders/{orderId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isOwner(userId) && resource.data.userId == userId;
      allow delete: if isOwner(userId) && resource.data.userId == userId;
    }

    /**
     * @description Allows read and write of order items.
     * @path /orders/{orderId}/orderItems/{orderItemId}
     * @allow (get, list) if true.
     * @allow (create, update, delete) if false.
     */
    match /orders/{orderId}/orderItems/{orderItemId} {
        allow get, list: if true;
        allow create, update, delete: if false; // TODO: Add proper authorization for managing order items.
    }
  }
}