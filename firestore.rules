rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) - Authenticated user with matching UID can create their profile.
     * @allow (get, list, update, delete) - Authenticated user with matching UID can access their profile.
     * @deny (create) - Unauthenticated user cannot create a profile.
     * @deny (get, list, update, delete) - Authenticated user cannot access another user's profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to product documents. Products are publicly readable but write access is denied.
     * @path /products/{productId}
     * @allow (get, list) - Any user can read product information.
     * @deny (create, update, delete) - No user can modify product information.
     * @principle Public read access with restricted writes.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to cart items for a specific user.
     * @path /users/{userId}/cartItems/{cartItemId}
     * @allow (create) - Authenticated user can create a cart item for themselves.  Validates that the userId in the cartItem matches the path.
     * @allow (get, list, update, delete) - Authenticated user can access and manage their own cart items.
     * @deny (create) - User cannot create a cart item for another user.
     * @deny (get, list, update, delete) - User cannot access another user's cart items.
     * @principle Enforces document ownership for cart items.
     */
    match /users/{userId}/cartItems/{cartItemId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to order documents for a specific user.
     * @path /users/{userId}/orders/{orderId}
     * @allow (create) - Authenticated user can create an order for themselves. Validates that the userId in the order matches the path.
     * @allow (get, list, update, delete) - Authenticated user can access and manage their own orders.
     * @deny (create) - User cannot create an order for another user.
     * @deny (get, list, update, delete) - User cannot access another user's orders.
     * @principle Enforces document ownership for orders.
     */
    match /users/{userId}/orders/{orderId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to order item documents within a specific order.
     * @path /orders/{orderId}/orderItems/{orderItemId}
     * @allow (get, list) - Anyone can read product information.
     * @deny (create, update, delete) - No user can modify product information.
     */
    match /orders/{orderId}/orderItems/{orderItemId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}