/**
 * @fileoverview Firestore Security Rules for the e-commerce application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data
 * (profiles, cart items, and orders). Products are publicly readable but
 * require administrative privileges to modify.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. Only the authenticated
 *   user can access their own profile.
 * - /products/{productId}: Stores product details. Publicly readable, but write
 *   access is restricted to authorized roles.
 * - /users/{userId}/cartItems/{cartItemId}: Stores cart items for each user.
 *   Only the user can manage their own cart.  The userId is denormalized on each cartItem document.
 * - /users/{userId}/orders/{orderId}: Stores order history for each user.
 *   Only the user can access their own order history. The userId is denormalized on each order document.
 * - /orders/{orderId}/orderItems/{orderItemId}: Stores items associated with an order.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Products are publicly readable to facilitate browsing.
 * - All write operations (create, update, delete) require explicit authorization checks based on ownership or role.
 *
 * Denormalization for Authorization:
 * - CartItems and Orders include a 'userId' field to allow direct ownership checks without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-based access control for user profiles.
     * @path /users/{userId}
     * @allow (get, update, delete) User with matching {userId} can access their own profile.
     * @allow (create) User can create their profile if the userId matches their auth.uid.
     * @deny (get, update, delete) User cannot access another user's profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Allows public read access to product information while restricting write access.
     * @path /products/{productId}
     * @allow (get, list) Any user can read product information.
     * @deny (create, update, delete) Only authorized roles (e.g., admin) can modify product information.
     * @principle Implements public read access with restricted write access for product catalog.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add role-based authorization for product modifications
    }

    /**
     * @description Enforces user-based access control for cart items.
     * @path /users/{userId}/cartItems/{cartItemId}
     * @allow (get, update, delete) User with matching {userId} can access their own cart items.
     * @allow (create) User can create a cart item if the userId matches their auth.uid.
     * @deny (get, update, delete) User cannot access another user's cart items.
     * @principle Enforces document ownership for cart items.
     */
    match /users/{userId}/cartItems/{cartItemId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == request.auth.uid;
      allow update: if isOwner(userId) && resource.data.userId == request.auth.uid;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces user-based access control for orders.
     * @path /users/{userId}/orders/{orderId}
     * @allow (get, update, delete) User with matching {userId} can access their own orders.
     * @allow (create) User can create an order if the userId matches their auth.uid.
     * @deny (get, update, delete) User cannot access another user's orders.
     * @principle Enforces document ownership for orders.
     */
    match /users/{userId}/orders/{orderId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == request.auth.uid;
      allow update: if isOwner(userId) && resource.data.userId == request.auth.uid && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Restricts access to order items, as these should be managed through orders.
     * @path /orders/{orderId}/orderItems/{orderItemId}
     * @deny (get, list, create, update, delete) No direct access to order items.
     * @principle Prevents direct manipulation of order items; enforces access via order management.
     */
    match /orders/{orderId}/orderItems/{orderItemId} {
      allow get, list, create, update, delete: if false; // Order items should be managed via orders
    }

       /**
     * @description Denies listing of the orders collection
     * @path /orders
     * @deny list: No listing
     */
    match /orders {
      allow get, create, update, delete: if false;
      allow list: if false;
    }
  }
}