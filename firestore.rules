/**
 * @fileoverview Firestore Security Rules for the e-commerce application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data (profiles, carts, orders)
 * while allowing public read access to the product catalog.
 * A top-level `/orders` collection is available for admin or anonymous sales purposes.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the user themselves.
 * - /products/{productId}: Stores product information, publicly readable.
 * - /users/{userId}/cartItems/{cartItemId}: Stores cart items, accessible only to the user.
 * - /users/{userId}/orders/{orderId}: Stores order history, accessible only to the user.
 * - /users/{userId}/orders/{orderId}/orderItems/{orderItemId}: Stores order item details, accessible only to the user.
 * - /orders/{orderId}: Root-level orders collection, writable by anyone.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Products are publicly readable but only modifiable by authorized roles (not yet implemented).
 * - All write operations on user-owned data require authentication.
 * - The root `/orders` collection is designed for open access, acknowledging its use in anonymous or admin contexts.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (get, list) if isOwner(userId)
     * @allow (create) if isOwner(userId)
     * @allow (update, delete) if isExistingOwner(userId)
     * @deny (get, list) if !isSignedIn()
     * @deny (create) if !isSignedIn()
     * @deny (update, delete) if !isSignedIn()
     * @deny (create) if request.resource.data.id != request.auth.uid
     * @deny (update) if request.resource.data.id != resource.data.id
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to product information.
     * @path /products/{productId}
     * @allow (get, list) if true
     * @allow (create, update, delete) if false // TODO: Add role-based authorization for product management
     * @deny (create, update, delete) if true
     * @principle Allows public read access to product data but restricts modification.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add role-based authorization for product management
    }

    /**
     * @description Controls access to cart items for a specific user.
     * @path /users/{userId}/cartItems/{cartItemId}
     * @allow (get, list) if isOwner(userId)
     * @allow (create) if isOwner(userId)
     * @allow (update, delete) if isExistingOwner(userId)
     * @deny (get, list) if !isSignedIn()
     * @deny (create) if !isSignedIn()
     * @deny (update, delete) if !isSignedIn()
     * @principle Enforces document ownership and restricts cart access to the owning user.
     */
    match /users/{userId}/cartItems/{cartItemId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to order history for a specific user.
     * @path /users/{userId}/orders/{orderId}
     * @allow (get, list) if isOwner(userId)
     * @allow (create) if isOwner(userId)
     * @allow (update, delete) if isExistingOwner(userId)
     * @deny (get, list) if !isSignedIn()
     * @deny (create) if !isSignedIn()
     * @deny (update, delete) if !isSignedIn()
     * @principle Enforces document ownership and restricts order access to the owning user.
     */
    match /users/{userId}/orders/{orderId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);

        /**
         * @description Controls access to order items within a specific order.
         * @path /users/{userId}/orders/{orderId}/orderItems/{orderItemId}
         * @allow (get, list) if isOwner(userId)
         * @allow (create) if isOwner(userId)
         * @allow (update, delete) if isExistingOwner(userId)
         * @deny (get, list) if !isSignedIn()
         * @deny (create) if !isSignedIn()
         * @deny (update, delete) if !isSignedIn()
         * @principle Enforces document ownership and restricts access to order details to the owning user.
         */
      match /orderItems/{orderItemId} {
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isSignedIn() && isOwner(userId);
        allow update: if isSignedIn() && isExistingOwner(userId);
        allow delete: if isSignedIn() && isExistingOwner(userId);
      }
    }
      /**
         * @description Controls access to orders at the root level.
         * @path /orders/{orderId}
         * @allow (get, list, create, update, delete) if true;
         * @principle Allows open access to the orders collection for anonymous sales and admin queries.
         */
    match /orders/{orderId} {
        allow get, list, create, update, delete: if true;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}