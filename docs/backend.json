{
  "entities": {
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user of the e-commerce platform, authenticated via Firebase Auth.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user, provided by Firebase Auth.",
          "format": "uuid"
        },
        "email": {
          "type": "string",
          "description": "User's email address.",
          "format": "email"
        },
        "displayName": {
          "type": "string",
          "description": "User's display name."
        },
        "photoURL": {
          "type": "string",
          "description": "URL of the user's profile photo.",
          "format": "uri"
        },
        "role": {
          "type": "string",
          "description": "The role of the user; can only be 'client' in this context."
        }
      },
      "required": [
        "id",
        "email",
        "role"
      ]
    },
    "Product": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Product",
      "type": "object",
      "description": "Represents a product available in the e-commerce store, stored in Firestore.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the product."
        },
        "name": {
          "type": "string",
          "description": "Name of the product."
        },
        "description": {
          "type": "string",
          "description": "Detailed description of the product."
        },
        "price": {
          "type": "number",
          "description": "Price of the product."
        },
        "category": {
          "type": "string",
          "description": "Category of the product."
        },
        "availableSizes": {
          "type": "array",
          "description": "Available sizes for the product.",
          "items": {
            "type": "string"
          }
        },
        "stock": {
          "type": "number",
          "description": "Current stock level of the product."
        },
        "imageUrl": {
          "type": "string",
          "description": "URL of the main product image, stored in Firebase Storage.",
          "format": "uri"
        },
        "imageUrls": {
          "type": "array",
          "description": "URLs of additional product images, stored in Firebase Storage.",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "name",
        "price",
        "category",
        "availableSizes",
        "stock",
        "imageUrl"
      ]
    },
    "CartItem": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "CartItem",
      "type": "object",
      "description": "Represents an item in the user's shopping cart. Stored in Firestore or localStorage.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the cart item."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N CartItem)"
        },
        "productId": {
          "type": "string",
          "description": "Reference to Product. (Relationship: Product 1:N CartItem)"
        },
        "size": {
          "type": "string",
          "description": "Selected size of the product."
        },
        "quantity": {
          "type": "number",
          "description": "Quantity of the product in the cart."
        }
      },
      "required": [
        "id",
        "userId",
        "productId",
        "size",
        "quantity"
      ]
    },
    "Order": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Order",
      "type": "object",
      "description": "Represents a customer order, stored in Firestore.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the order."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N Order)"
        },
        "products": {
          "type": "array",
          "description": "List of products included in the order.",
          "items": {
            "type": "string"
          }
        },
        "totalAmount": {
          "type": "number",
          "description": "Total amount of the order."
        },
        "status": {
          "type": "string",
          "description": "Status of the order (pending, paid, shipped, delivered, cancelled)."
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp of when the order was created.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "userId",
        "products",
        "totalAmount",
        "status",
        "createdAt"
      ]
    },
    "OrderItem": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "OrderItem",
      "type": "object",
      "description": "Represents a specific product within an order.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the order item."
        },
        "orderId": {
          "type": "string",
          "description": "Reference to Order. (Relationship: Order 1:N OrderItem)"
        },
        "productId": {
          "type": "string",
          "description": "Reference to Product. (Relationship: Product 1:N OrderItem)"
        },
        "name": {
          "type": "string",
          "description": "Name of the product."
        },
        "size": {
          "type": "string",
          "description": "The size of the product ordered."
        },
        "quantity": {
          "type": "number",
          "description": "Quantity of the product ordered."
        },
        "unitPrice": {
          "type": "number",
          "description": "Price of one unit of the product at the time of the order."
        }
      },
      "required": [
        "id",
        "orderId",
        "productId",
        "quantity",
        "unitPrice",
        "name"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user profile information.  Path-based ownership ensures only the authenticated user can access their own profile data.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user, obtained from Firebase Auth."
            }
          ]
        }
      },
      {
        "path": "/products/{productId}",
        "definition": {
          "entityName": "Product",
          "schema": {
            "$ref": "#/backend/entities/Product"
          },
          "description": "Stores product details. Products are globally accessible for reading but restricted for modification to authorized roles (e.g., admin).",
          "params": [
            {
              "name": "productId",
              "description": "The unique identifier of the product."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/cartItems/{cartItemId}",
        "definition": {
          "entityName": "CartItem",
          "schema": {
            "$ref": "#/backend/entities/CartItem"
          },
          "description": "Stores cart items associated with a specific user. Includes denormalized 'userId' for authorization independence.  This enables direct access to a user's cart without server-side lookups.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            },
            {
              "name": "cartItemId",
              "description": "The unique identifier of the cart item."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/orders/{orderId}",
        "definition": {
          "entityName": "Order",
          "schema": {
            "$ref": "#/backend/entities/Order"
          },
          "description": "Stores order details for a specific user. Includes denormalized 'userId' for authorization independence, ensuring only the user can access their order history.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            },
            {
              "name": "orderId",
              "description": "The unique identifier of the order."
            }
          ]
        }
      },
      {
        "path": "/orders/{orderId}/orderItems/{orderItemId}",
        "definition": {
          "entityName": "OrderItem",
          "schema": {
            "$ref": "#/backend/entities/OrderItem"
          },
          "description": "Stores specific product details within an order. Represents the relationship between Order and OrderItem.",
          "params": [
            {
              "name": "orderId",
              "description": "The unique identifier of the order."
            },
            {
              "name": "orderItemId",
              "description": "The unique identifier of the order item."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to support the e-commerce application's requirements, focusing on user authentication, product catalog, shopping cart, checkout, and order history. It emphasizes Authorization Independence via denormalization, Structural Segregation for homogeneous security posture, and standardized Access Modeling.  User data is segregated under `/users/{userId}`. Products are stored globally in `/products`. Cart items are stored as a subcollection of the user document `/users/{userId}/cartItems/{cartItemId}`. Orders are also kept as a subcollection under `/users/{userId}/orders/{orderId}`.  This approach ensures clear ownership and simplifies security rules. All documents within a collection share the same security requirements.  Authorization independence is achieved by storing the `userId` within each `cartItem` and `order`, eliminating the need for server-side lookups to validate ownership. This allows for secure and efficient data retrieval and management. The design facilitates secure `list` operations through path-based ownership (`/users/{userId}/orders`) and collection-based access (`/products`)."
  }
}